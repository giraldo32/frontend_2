import React, { useEffect, useState } from 'react';
import MediaService from '../../services/MediaService';
import Swal from 'sweetalert2';
import 'bootstrap/dist/css/bootstrap.min.css';

const Media = () => {
  const [media, setMedia] = useState([]);
  const [titulo, setTitulo] = useState('');
  const [sinopsis, setSinopsis] = useState('');
  const [url, setUrl] = useState('');
  const [imagen, setImagen] = useState('');
  const [anioEstreno, setAnioEstreno] = useState('');
  const [editId, setEditId] = useState(null);
  
  const fetchMedia = async () => {
    try {
      const data = await MediaService.getMedia();
      setMedia(data);
    } catch (error) {
      Swal.fire('Error', 'No se pudo cargar la media', 'error');
    }
  };

  useEffect(() => {
    fetchMedia();
  }, []);
  
  const cargarEjemplo = async () => {
    try {
      await MediaService.createMedia({ titulo: 'Inception', sinopsis: 'Un ladrón que roba secretos a través de sueños.', url: 'https://ejemplo.com/inception', imagen: 'https://ejemplo.com/inception.jpg', anioEstreno: 2010 });
      await MediaService.createMedia({ titulo: 'El Rey León', sinopsis: 'Un león joven debe reclamar su trono.', url: 'https://ejemplo.com/rey-leon', imagen: 'https://ejemplo.com/rey-leon.jpg', anioEstreno: 1994 });
      fetchMedia();
      Swal.fire('Datos de ejemplo cargados', '', 'success');
    } catch {
      Swal.fire('Error', 'No se pudieron cargar los datos de ejemplo', 'error');
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      if (editId) {
        await MediaService.updateMedia(editId, { titulo, sinopsis, url, imagen, anioEstreno });
        Swal.fire('Actualizado', 'Media actualizada correctamente', 'success');
      } else {
        await MediaService.createMedia({ titulo, sinopsis, url, imagen, anioEstreno });
        Swal.fire('Creado', 'Media creada correctamente', 'success');
      }
      setTitulo(''); setSinopsis(''); setUrl(''); setImagen(''); setAnioEstreno(''); setEditId(null);
      fetchMedia();
    } catch {
      Swal.fire('Error', 'No se pudo guardar la media', 'error');
    }
  };

  const handleEdit = (m) => {
    setTitulo(m.titulo);
    setSinopsis(m.sinopsis);
    setUrl(m.url);
    setImagen(m.imagen);
    setAnioEstreno(m.anioEstreno);
    setEditId(m._id);
  };

  const handleDelete = async (id) => {
    if (await Swal.fire({ title: '¿Eliminar?', text: 'No se puede deshacer', icon: 'warning', showCancelButton: true, confirmButtonText: 'Sí, eliminar' }).then(r => r.isConfirmed)) {
      try {
        await MediaService.deleteMedia(id);
        Swal.fire('Eliminado', 'Media eliminada', 'success');
        fetchMedia();
      } catch {
        Swal.fire('Error', 'No se pudo eliminar', 'error');
      }
    }
  };

  return (
    <div className="container mt-4">
      <h2>Media (Películas y Series)</h2>
      <form className="mb-3" onSubmit={handleSubmit}>
        <div className="row g-2 align-items-center">
          <div className="col-auto">
            <input type="text" className="form-control" placeholder="Título" value={titulo} onChange={e => setTitulo(e.target.value)} required />
          </div>
          <div className="col-auto">
            <input type="text" className="form-control" placeholder="Sinopsis" value={sinopsis} onChange={e => setSinopsis(e.target.value)} />
          </div>
          <div className="col-auto">
            <input type="text" className="form-control" placeholder="URL" value={url} onChange={e => setUrl(e.target.value)} />
          </div>
          <div className="col-auto">
            <input type="text" className="form-control" placeholder="Imagen" value={imagen} onChange={e => setImagen(e.target.value)} />
          </div>
          <div className="col-auto">
            <input type="number" className="form-control" placeholder="Año Estreno" value={anioEstreno} onChange={e => setAnioEstreno(e.target.value)} />
          </div>
          <div className="col-auto">
            <button className="btn btn-primary" type="submit">{editId ? 'Actualizar' : 'Agregar'}</button>
            {editId && <button className="btn btn-secondary ms-2" type="button" onClick={() => { setEditId(null); setTitulo(''); setSinopsis(''); setUrl(''); setImagen(''); setAnioEstreno(''); }}>Cancelar</button>}
          </div>
        </div>
      </form>
      {media.length === 0 ? (
        <div className="alert alert-info text-center">
          No hay media registrada.<br />
          <button className="btn btn-outline-primary mt-2" onClick={cargarEjemplo}>Cargar datos de ejemplo</button>
        </div>
      ) : (
        <table className="table table-striped">
          <thead>
            <tr>
              <th>Título</th>
              <th>Sinopsis</th>
              <th>URL</th>
              <th>Imagen</th>
              <th>Año Estreno</th>
              <th>Acciones</th>
            </tr>
          </thead>
          <tbody>
            {media.map(m => (
              <tr key={m._id}>
                <td>{m.titulo}</td>
                <td>{m.sinopsis}</td>
                <td>{m.url}</td>
                <td>{m.imagen}</td>
                <td>{m.anioEstreno}</td>
                <td>
                  <button className="btn btn-warning btn-sm me-2" onClick={() => handleEdit(m)}>Editar</button>
                  <button className="btn btn-danger btn-sm" onClick={() => handleDelete(m._id)}>Eliminar</button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      )}
    </div>
  );
};

export default Media;