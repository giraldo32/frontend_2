import React, { useEffect, useState } from 'react';
import MediaService from '../../services/MediaService';
import Swal from 'sweetalert2';
import 'bootstrap/dist/css/bootstrap.min.css';
import 'bootstrap-icons/font/bootstrap-icons.css';
import './media.css';

const Media = () => {
  const [media, setMedia] = useState([]);
  const [titulo, setTitulo] = useState('');
  const [sinopsis, setSinopsis] = useState('');
  const [url, setUrl] = useState('');
  const [anioEstreno, setAnioEstreno] = useState('');
  const [editId, setEditId] = useState(null);
  const [loading, setLoading] = useState(false);

  const cargarEjemplo = async () => {
    try {
      setLoading(true);
      await MediaService.createMedia({ titulo: 'Inception', sinopsis: 'Un ladrón que roba secretos a través de sueños.', url: 'https://ejemplo.com/inception', anioEstreno: 2010 });
      await MediaService.createMedia({ titulo: 'El Rey León', sinopsis: 'Un león joven debe reclamar su trono.', url: 'https://ejemplo.com/rey-leon', anioEstreno: 1994 });
      fetchMedia();
      Swal.fire('Datos de ejemplo cargados', '', 'success');
    } catch {
      Swal.fire('Error', 'No se pudieron cargar los datos de ejemplo', 'error');
    } finally {
      setLoading(false);
    }
  };

  const fetchMedia = async () => {
    try {
      setLoading(true);
      const data = await MediaService.getMedia();
      setMedia(data);
    } catch (error) {
      Swal.fire('Error', 'No se pudo cargar la media', 'error');
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchMedia();
  }, []);

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      setLoading(true);
      if (editId) {
        await MediaService.updateMedia(editId, { titulo, sinopsis, url, anioEstreno });
        Swal.fire('Actualizado', 'Media actualizada correctamente', 'success');
      } else {
        await MediaService.createMedia({ titulo, sinopsis, url, anioEstreno });
        Swal.fire('Creado', 'Media creada correctamente', 'success');
      }
      setTitulo(''); setSinopsis(''); setUrl(''); setAnioEstreno(''); setEditId(null);
      fetchMedia();
    } catch {
      Swal.fire('Error', 'No se pudo guardar la media', 'error');
    } finally {
      setLoading(false);
    }
  };

  const handleEdit = (m) => {
    setTitulo(m.titulo);
    setSinopsis(m.sinopsis || '');
    setUrl(m.url || '');
    setAnioEstreno(m.anioEstreno || '');
    setEditId(m._id);
    window.scrollTo(0, 0);
  };

  const handleDelete = async (id) => {
    if (await Swal.fire({ title: '¿Eliminar?', text: 'No se puede deshacer', icon: 'warning', showCancelButton: true, confirmButtonText: 'Sí, eliminar' }).then(r => r.isConfirmed)) {
      try {
        setLoading(true);
        await MediaService.deleteMedia(id);
        Swal.fire('Eliminado', 'Media eliminada', 'success');
        fetchMedia();
      } catch {
        Swal.fire('Error', 'No se pudo eliminar', 'error');
      } finally {
        setLoading(false);
      }
    }
  };

  return (
    <div className="container py-4">
      <div className="media-header text-center fade-in">
        <h1 className="display-5 fw-bold">Gestión de Media</h1>
        <p className="lead">Administra películas y series con toda su información</p>
      </div>
      
      <div className="card media-form fade-in">
        <div className="card-body">
          <h4 className="card-title mb-4">
            <i className="bi bi-film me-2"></i>
            {editId ? 'Editar Media' : 'Nueva Media'}
          </h4>
          <form onSubmit={handleSubmit}>
            <div className="row g-3">
              <div className="col-md-6">
                <div className="form-floating mb-3">
                  <input 
                    type="text" 
                    className="form-control" 
                    id="tituloMedia" 
                    placeholder="Título" 
                    value={titulo} 
                    onChange={e => setTitulo(e.target.value)} 
                    required 
                  />
                  <label htmlFor="tituloMedia">Título</label>
                </div>
              </div>
              <div className="col-md-6">
                <div className="form-floating mb-3">
                  <input 
                    type="number" 
                    className="form-control" 
                    id="anioEstrenoMedia" 
                    placeholder="Año de estreno" 
                    value={anioEstreno} 
                    onChange={e => setAnioEstreno(e.target.value)} 
                    min="1900" 
                    max={new Date().getFullYear()} 
                  />
                  <label htmlFor="anioEstrenoMedia">Año de estreno</label>
                </div>
              </div>
              <div className="col-md-6">
                <div className="form-floating mb-3">
                  <input 
                    type="text" 
                    className="form-control" 
                    id="sinopsisMedia" 
                    placeholder="Sinopsis" 
                    value={sinopsis} 
                    onChange={e => setSinopsis(e.target.value)} 
                  />
                  <label htmlFor="sinopsisMedia">Sinopsis</label>
                </div>
              </div>
              <div className="col-md-6">
                <div className="form-floating mb-3">
                  <input 
                    type="url" 
                    className="form-control" 
                    id="urlMedia" 
                    placeholder="URL de la imagen" 
                    value={url} 
                    onChange={e => setUrl(e.target.value)} 
                  />
                  <label htmlFor="urlMedia">URL de la imagen</label>
                </div>
              </div>
            </div>
            <div className="mt-3 d-flex justify-content-end">
              {editId && (
                <button 
                  className="btn btn-outline-secondary me-2 btn-icon" 
                  type="button" 
                  onClick={() => { setEditId(null); setTitulo(''); setSinopsis(''); setUrl(''); setAnioEstreno(''); }}
                >
                  <i className="bi bi-x-circle"></i> Cancelar
                </button>
              )}
              <button className="btn btn-primary btn-icon" type="submit">
                <i className="bi bi-save"></i> {editId ? 'Actualizar Media' : 'Guardar Media'}
              </button>
            </div>
          </form>
        </div>
      </div>
      
      {media.length === 0 ? (
        <div className="empty-state mt-4 fade-in">
          <i className="bi bi-film empty-state-icon"></i>
          <h3>No hay media registrada</h3>
          <p className="text-muted">Comienza creando una nueva película o serie, o carga datos de ejemplo.</p>
          <button className="btn btn-primary btn-lg mt-2 btn-icon" onClick={cargarEjemplo}>
            <i className="bi bi-cloud-download"></i> Cargar datos de ejemplo
          </button>
        </div>
      ) : (
        <div className="mt-4 fade-in">
          <div className="d-flex justify-content-between align-items-center mb-3">
            <h4 className="mb-0">
              <i className="bi bi-collection-play me-2"></i>
              Catálogo de Media
            </h4>
            <span className="badge bg-primary">{media.length} elementos</span>
          </div>
          
          <div className="media-grid">
            {media.map(m => (
              <div key={m._id} className="card media-card">
                {m.url ? (
                  <div className="position-relative">
                    <img 
                      src={m.url} 
                      className="card-img-top" 
                      alt={m.titulo} 
                      style={{ objectFit: 'cover', height: '200px' }}
                      onError={(e) => {
                        e.target.src = 'https://via.placeholder.com/300x200?text=Sin+Imagen';
                      }}
                    />
                    <div className="card-img-overlay">
                      <div className="d-flex justify-content-end mt-auto mb-2">
                        <button 
                          className="btn btn-primary btn-sm me-2 action-button" 
                          onClick={() => handleEdit(m)}
                        >
                          <i className="bi bi-pencil-fill"></i>
                        </button>
                        <button 
                          className="btn btn-danger btn-sm action-button" 
                          onClick={() => handleDelete(m._id)}
                        >
                          <i className="bi bi-trash-fill"></i>
                        </button>
                      </div>
                    </div>
                  </div>
                ) : (
                  <div className="card-img-top d-flex align-items-center justify-content-center bg-light" style={{ height: '200px' }}>
                    <span className="text-muted"><i className="bi bi-camera-video fs-1"></i></span>
                  </div>
                )}
                <div className="card-body">
                  <h5 className="card-title fw-bold">{m.titulo}</h5>
                  <p className="card-text text-muted small">{m.sinopsis || <span className="fst-italic">Sin sinopsis</span>}</p>
                  <div className="d-flex justify-content-between align-items-center">
                    <span className="badge bg-secondary">{m.anioEstreno}</span>
                    <div>
                      <button className="btn btn-outline-primary btn-sm me-1" onClick={() => handleEdit(m)}>
                        <i className="bi bi-pencil"></i> Editar
                      </button>
                      <button className="btn btn-outline-danger btn-sm" onClick={() => handleDelete(m._id)}>
                        <i className="bi bi-trash"></i> Eliminar
                      </button>
                    </div>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
  );
};

export default Media;
